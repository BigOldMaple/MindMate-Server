pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().toString())
}

plugins { id("com.facebook.react.settings") }

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    def command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'android'
    ].toList()
    ex.autolinkLibrariesFromCommand(command)
  }
}

rootProject.name = 'MindMate'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
  repositories {
    google()
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

include ':app'

// Include React Native modules manually to ensure they're properly linked
include ':react-native-async-storage_async-storage'
project(':react-native-async-storage_async-storage').projectDir = new File(['node', '--print', "require.resolve('@react-native-async-storage/async-storage/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getParentFile()

include ':react-native-community_netinfo'
project(':react-native-community_netinfo').projectDir = new File(['node', '--print', "require.resolve('@react-native-community/netinfo/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getParentFile()

include ':react-native-get-random-values'
project(':react-native-get-random-values').projectDir = new File(['node', '--print', "require.resolve('react-native-get-random-values/package.json')"].execute(null, rootDir).text.trim()).getParentFile()

include ':react-native-health-connect'
project(':react-native-health-connect').projectDir = new File(['node', '--print', "require.resolve('react-native-health-connect/package.json')"].execute(null, rootDir).text.trim()).getParentFile()

include ':react-native-reanimated'
project(':react-native-reanimated').projectDir = new File(['node', '--print', "require.resolve('react-native-reanimated/package.json')"].execute(null, rootDir).text.trim()).getParentFile()

include ':react-native-safe-area-context'
project(':react-native-safe-area-context').projectDir = new File(['node', '--print', "require.resolve('react-native-safe-area-context/package.json')"].execute(null, rootDir).text.trim()).getParentFile()

include ':react-native-screens'
project(':react-native-screens').projectDir = new File(['node', '--print', "require.resolve('react-native-screens/package.json')"].execute(null, rootDir).text.trim()).getParentFile()

includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())